// <auto-generated />
using System;
using Cinemateque.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cinemateque.DataAccess.Migrations
{
    [DbContext(typeof(CinematequeContext))]
    partial class CinematequeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActorName")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.ActorRatingEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActorId");

                    b.Property<DateTime>("Date");

                    b.Property<double?>("Rating");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.ToTable("ActorRatingEntry");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Crew.CrewRatingEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CrewMemberId");

                    b.Property<DateTime>("Date");

                    b.Property<double?>("Rating");

                    b.HasKey("Id");

                    b.HasIndex("CrewMemberId");

                    b.ToTable("CrewRatingEntry");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.CrewMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmsChecked");

                    b.Property<string>("Job");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CrewMembers");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DirectorName")
                        .HasMaxLength(50);

                    b.Property<int>("FilmsChecked");

                    b.Property<double?>("Rating");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actors");

                    b.Property<string>("Director");

                    b.Property<string>("FilmName");

                    b.Property<string>("Genres");

                    b.Property<int>("Movieid");

                    b.Property<string>("PremiereDate");

                    b.Property<float?>("Rating");

                    b.HasKey("Id");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Movie.MovieDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActorsCsvs");

                    b.Property<string>("ActorsPopularity");

                    b.Property<double>("Budget");

                    b.Property<string>("Companies");

                    b.Property<string>("CompaniesFlags");

                    b.Property<string>("CrewCsvs");

                    b.Property<string>("CrewPopularity");

                    b.Property<string>("Genres");

                    b.Property<string>("GenresFlags");

                    b.Property<int>("MovieId");

                    b.Property<double>("Rating");

                    b.Property<string>("ReleaseDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Passwrod")
                        .HasMaxLength(30);

                    b.Property<int?>("Rating");

                    b.Property<string>("Role")
                        .HasMaxLength(50);

                    b.Property<string>("Token")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.UserFilms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FilmId");

                    b.Property<float?>("Rating");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFilms");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.ActorRatingEntry", b =>
                {
                    b.HasOne("Cinemateque.DataAccess.Models.Actor", "Actor")
                        .WithMany("Ratings")
                        .HasForeignKey("ActorId");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Crew.CrewRatingEntry", b =>
                {
                    b.HasOne("Cinemateque.DataAccess.Models.CrewMember", "CrewMember")
                        .WithMany("Ratings")
                        .HasForeignKey("CrewMemberId");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.UserFilms", b =>
                {
                    b.HasOne("Cinemateque.DataAccess.Models.Film", "Film")
                        .WithMany("UserFilms")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("FK_UserFilms_Film");

                    b.HasOne("Cinemateque.DataAccess.Models.User", "User")
                        .WithMany("UserFilms")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserFilms_User");
                });
#pragma warning restore 612, 618
        }
    }
}
