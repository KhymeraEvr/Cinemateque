// <auto-generated />
using System;
using Cinemateque.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cinemateque.DataAccess.Migrations
{
    [DbContext(typeof(CinematequeContext))]
    partial class CinematequeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActorName")
                        .HasMaxLength(30);

                    b.Property<int?>("Rating");

                    b.HasKey("Id");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DirectorName")
                        .HasMaxLength(50);

                    b.Property<int?>("Rating");

                    b.HasKey("Id");

                    b.ToTable("Director");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DirectorId");

                    b.Property<float>("Discount");

                    b.Property<string>("FilmName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Genre")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime?>("PremiereDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Price");

                    b.Property<int?>("Rating");

                    b.Property<int>("Views");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.FilmActors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActorId");

                    b.Property<int?>("FilmId");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmActors");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.FilmReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("FilmId");

                    b.Property<string>("RewardName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmReward");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("UserId");

                    b.HasKey("OrderId");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Passwrod")
                        .HasMaxLength(30);

                    b.Property<int?>("Rating");

                    b.Property<string>("Role")
                        .HasMaxLength(50);

                    b.Property<string>("Token")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.UserFilms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FilmId");

                    b.Property<float?>("Rating");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFilms");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Film", b =>
                {
                    b.HasOne("Cinemateque.DataAccess.Models.Director", "Director")
                        .WithMany("Film")
                        .HasForeignKey("DirectorId")
                        .HasConstraintName("FK_Film_Director");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.FilmActors", b =>
                {
                    b.HasOne("Cinemateque.DataAccess.Models.Actor", "Actor")
                        .WithMany("FilmActors")
                        .HasForeignKey("ActorId")
                        .HasConstraintName("FK_FilmActors_Actor");

                    b.HasOne("Cinemateque.DataAccess.Models.Film", "Film")
                        .WithMany("FilmActors")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("FK_FilmActors_Film");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.FilmReward", b =>
                {
                    b.HasOne("Cinemateque.DataAccess.Models.Film", "Film")
                        .WithMany("FilmReward")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("FK_FilmReward_Film1");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.Order", b =>
                {
                    b.HasOne("Cinemateque.DataAccess.Models.Film", "Film")
                        .WithMany("Order")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("FK_Order_Film");

                    b.HasOne("Cinemateque.DataAccess.Models.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_User");
                });

            modelBuilder.Entity("Cinemateque.DataAccess.Models.UserFilms", b =>
                {
                    b.HasOne("Cinemateque.DataAccess.Models.Film", "Film")
                        .WithMany("UserFilms")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("FK_UserFilms_Film");

                    b.HasOne("Cinemateque.DataAccess.Models.User", "User")
                        .WithMany("UserFilms")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserFilms_User");
                });
#pragma warning restore 612, 618
        }
    }
}
